#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('SleepService:server');
var http = require('http');
var conf = require("../config");
var mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

var port = conf.get('server.port');
var ip = conf.get("server.ip");

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, ip);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  // connect to database
  connect_db();
}

function connect_db() {
  mongoose.connect(conf.get('db.mongodb.url'), function (error) {
    if(error) {
      console.error(error);
      return;
    }

    debug("Connected to mongodb.");
    // var SleepRecord = require("../models/SleepRecord");
    // var sr = new SleepRecord({userId: "test", fallAsleepTime: Date.now(), wakeupTime: Date.now() + 10});
    // sr.save();

  });
}