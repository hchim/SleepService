#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('SleepService:server');
var http = require('http');
var conf = require("../config");
var mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

var port = conf.get('server.port');
var ip = conf.get("server.ip");
var dbUrl = conf.get('db.mongodb.url');
var env = conf.get('env');

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, ip);
server.on('error', onError);
server.on('listening', onListening);

// Mongoose listeners
mongoose.connection.on('disconnected', function(){
  console.log('Lost MongoDB connection... : ' + dbUrl);
  //Reconnect every 5 seconds.
  setTimeout(connect_db, 5000);
});

mongoose.connection.on('connected', function() {
  console.log('Connection established to : ' + dbUrl);
});

mongoose.connection.once('open', function() {
  console.log('Connection open');
});

mongoose.connection.on('error', function() {
  console.log('Could not connect to : ' + dbUrl);
  mongoose.disconnect();
});

mongoose.connection.on('reconnected', function() {
  console.log('Reconnected to : ' + dbUrl);
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  console.log('Running on http://' + addr.address + ":" + addr.port);
  // connect to database
  connect_db();
}

function connect_db() {
  var options = {
    server:{
      auto_reconnect:true,
      socketOptions: { keepAlive: 1, connectTimeoutMS: 30000 }
    },
    replset: {
      socketOptions: { keepAlive: 1, connectTimeoutMS : 30000 }
    }
  };

  mongoose.connect(dbUrl, options, function (error) {
    if(error) {
      console.error(error);
      return;
    }

    debug("Connected to mongodb.");
    if (env === 'development' || env === 'test') {
      mongoose.set('debug', true);
    }
  });
}